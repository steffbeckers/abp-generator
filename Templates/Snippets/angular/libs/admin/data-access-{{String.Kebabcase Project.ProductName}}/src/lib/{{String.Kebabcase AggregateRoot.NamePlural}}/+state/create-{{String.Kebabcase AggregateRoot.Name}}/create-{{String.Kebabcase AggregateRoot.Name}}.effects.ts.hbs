import * as Create{{AggregateRoot.Name}}Actions from './create-{{String.Kebabcase AggregateRoot.Name}}.actions';
import * as Create{{AggregateRoot.Name}}Selectors from './create-{{String.Kebabcase AggregateRoot.Name}}.selectors';
import * as {{AggregateRoot.NamePlural}}Actions from '../{{String.Kebabcase AggregateRoot.NamePlural}}.actions';
import * as {{AggregateRoot.NamePlural}}APIActions from '../api/{{String.Kebabcase AggregateRoot.NamePlural}}-api.actions';
import { Actions, concatLatestFrom, createEffect, ofType } from '@ngrx/effects';
import { clearAsyncErrorsOnFormFieldUpdate, mapErrorToAsyncFormErrors } from '@inctrl/shared';
import { delay, map, mergeMap, tap } from 'rxjs';
import { FocusAction, SetValueAction } from 'ngrx-forms';
import { Injectable } from '@angular/core';
import { pessimisticUpdate } from '@nrwl/angular';
import { {{AggregateRoot.Name}}CreateInputDto, {{AggregateRoot.NamePlural}}Service } from '../../../proxy/{{String.Kebabcase Project.ProductName}}/admin/{{String.Kebabcase AggregateRoot.NamePlural}}';
import { Router } from '@angular/router';
import { Store } from '@ngrx/store';

@Injectable()
export class Create{{AggregateRoot.Name}}Effects {
  clearAsyncErrorsOnFormFieldUpdate$ = createEffect(() =>
    this.actions$.pipe(
      ofType(SetValueAction.TYPE),
      concatLatestFrom(() => this.store.select(Create{{AggregateRoot.Name}}Selectors.getForm)),
      mergeMap(([action, form]) => clearAsyncErrorsOnFormFieldUpdate(form, action))
    )
  );
  create{{AggregateRoot.Name}}$ = createEffect(() =>
    this.actions$.pipe(
      ofType(Create{{AggregateRoot.Name}}Actions.formSubmitted),
      concatLatestFrom(() => this.store.select(Create{{AggregateRoot.Name}}Selectors.getForm)),
      pessimisticUpdate({
        run: (_, form) => {
          return this.{{String.Camelcase AggregateRoot.NamePlural}}Service
            .create(form.value)
            .pipe(map(data => {{AggregateRoot.NamePlural}}APIActions.create{{AggregateRoot.Name}}Success({ data })));
        },
        onError: (_, response) => {
          return {{AggregateRoot.NamePlural}}APIActions.create{{AggregateRoot.Name}}Failure({ error: response?.error?.error });
        }
      })
    )
  );
  focusFirstField$ = createEffect(() =>
    this.actions$.pipe(
      ofType(Create{{AggregateRoot.Name}}Actions.opened),
      concatLatestFrom(() => this.store.select(Create{{AggregateRoot.Name}}Selectors.getForm)),
      delay(250),
      map(([, form]) => new FocusAction(form.controls.name?.id ?? ''))
    )
  );
  openModal$ = createEffect(
    () =>
      this.actions$.pipe(
        ofType({{AggregateRoot.NamePlural}}Actions.createButtonClicked),
        tap(() => this.router.navigate(['/{{String.Kebabcase AggregateRoot.NamePlural}}', 'create'], { replaceUrl: true }))
      ),
    { dispatch: false }
  );
  showAsyncErrorsInForm$ = createEffect(() =>
    this.actions$.pipe(
      ofType({{AggregateRoot.NamePlural}}APIActions.create{{AggregateRoot.Name}}Failure),
      concatLatestFrom(() => this.store.select(Create{{AggregateRoot.Name}}Selectors.getForm)),
      mergeMap(([{ error }, form]) =>
        mapErrorToAsyncFormErrors<{{AggregateRoot.Name}}CreateInputDto>(form, error)
      )
    )
  );

  constructor(
    private readonly actions$: Actions,
    private readonly store: Store,
    private router: Router,
    private {{String.Camelcase AggregateRoot.NamePlural}}Service: {{AggregateRoot.NamePlural}}Service
  ) {}
}
