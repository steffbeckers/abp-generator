{
  "RegexPattern": "(using Microsoft.EntityFrameworkCore;)",
  "RegexReplacement": "{0}\n$1"
}
#-#-#
using {{Project.Name}}.{{AggregateRoot.NamePlural}};
#-#-#
{
  "RegexPattern": "({{Project.ProductName}}DbContext :.*\n{)",
  "RegexReplacement": "$1\n{0}"
}
#-#-#
    public DbSet<{{AggregateRoot.Name}}> {{AggregateRoot.NamePlural}} { get; set; }

    {{#each AggregateRoot.Entities}}
    public DbSet<{{Name}}> {{NamePlural}} { get; set; }

    {{/each}}
#-#-#
{
  "RegexPattern": "(base.OnModelCreating\\\\(builder\\\\);)",
  "RegexReplacement": "$1\n\n{0}"
}
#-#-#
        builder.Entity<{{AggregateRoot.Name}}>(b =>
        {
            b.ToTable({{Project.ProductName}}DbProperties.DbTablePrefix + "{{AggregateRoot.NamePlural}}", {{Project.ProductName}}DbProperties.DbSchema);
            b.ConfigureByConvention();
            {{#each AggregateRoot.Properties}}
            b.Property(x => x.{{Name}}).HasColumnName(nameof({{../AggregateRoot.Name}}.{{Name}})){{#if Required}}.IsRequired(){{/if}}{{#if MaxLength}}.HasMaxLength({{../AggregateRoot.Name}}Consts.{{Name}}MaxLength){{/if}};
            {{/each}}
        });
            
        {{#each AggregateRoot.Entities}}
        builder.Entity<{{Name}}>(b =>
        {
            b.ToTable({{../Project.ProductName}}DbProperties.DbTablePrefix + "{{NamePlural}}", {{../Project.ProductName}}DbProperties.DbSchema);
            b.ConfigureByConvention();
            b.Property(x => x.{{../AggregateRoot.Name}}Id).HasColumnName(nameof({{Name}}.{{../AggregateRoot.Name}}Id)).IsRequired();
            b.HasOne(x => x.{{../AggregateRoot.Name}}).WithMany(x => x.{{AggregateRootPropertyNamePlural}}).HasForeignKey(x => x.{{../AggregateRoot.Name}}Id);
            {{#each Properties}}
            b.Property(x => x.{{Name}}).HasColumnName(nameof({{../Name}}.{{Name}})){{#if Required}}.IsRequired(){{/if}}{{#if MaxLength}}.HasMaxLength({{../Name}}Consts.{{Name}}MaxLength){{/if}};
            {{#if IsGuid}}
            b.HasOne(x => x.{{../../AggregateRoot.Name}}).WithMany(x => x.{{../AggregateRootPropertyNamePlural}}).HasForeignKey(x => x.{{Name}});
            {{/if}}
            {{/each}}
        });

        {{/each}}