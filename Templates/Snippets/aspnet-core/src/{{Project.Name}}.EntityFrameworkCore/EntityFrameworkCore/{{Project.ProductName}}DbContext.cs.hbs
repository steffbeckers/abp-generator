{
  "RegexPattern": "(using Microsoft.EntityFrameworkCore;)",
  "RegexReplacement": "{0}$1"
}
#-#-#
using {{Project.Name}}.{{AggregateRoot.NamePlural}};
#-#-#
{
  "RegexPattern": "({{Project.ProductName}}DbContext :.*
    {)",
  "RegexReplacement": "$1{0}"
}
#-#-#
        public DbSet<{{AggregateRoot.Name}}> {{AggregateRoot.NamePlural}} { get; set; }
#-#-#
{
  "RegexPattern": "(base.OnModelCreating\\\\(builder\\\\);)",
  "RegexReplacement": "$1\n{0}"
}
#-#-#
            builder.Entity<{{AggregateRoot.Name}}>(b =>
            {
                b.ToTable({{Project.ProductName}}Consts.DbTablePrefix + "{{AggregateRoot.NamePlural}}", {{Project.ProductName}}Consts.DbSchema);
                b.ConfigureByConvention();
                {{#each AggregateRoot.Properties}}
                b.Property(x => x.{{Name}}).HasColumnName(nameof({{../AggregateRoot.Name}}.{{Name}})){{#if Required}}.IsRequired(){{/if}}{{#if MaxLength}}.HasMaxLength({{../AggregateRoot.Name}}Consts.{{Name}}MaxLength){{/if}};
                {{/each}}
            });
            {{#each AggregateRoot.Entities}}

            builder.Entity<{{Name}}>(b =>
            {
                b.ToTable({{../Project.ProductName}}Consts.DbTablePrefix + "{{NamePlural}}", {{../Project.ProductName}}Consts.DbSchema);
                b.ConfigureByConvention();
                b.Property(x => x.{{../AggregateRoot.Name}}Id).HasColumnName(nameof({{Name}}.{{../AggregateRoot.Name}}Id)).IsRequired();
                b.HasOne(x => x.{{../AggregateRoot.Name}}).WithMany(x => x.{{AggregateRootPropertyName}}).HasForeignKey(x => x.{{../AggregateRoot.Name}}Id);
                {{#each Properties}}
                b.Property(x => x.{{Name}}).HasColumnName(nameof({{../Name}}.{{Name}})){{#if Required}}.IsRequired(){{/if}}{{#if MaxLength}}.HasMaxLength({{../Name}}Consts.{{Name}}MaxLength){{/if}};
                {{#if IsGuid}}
                b.HasOne(x => x.{{../../AggregateRoot.Name}}).WithMany(x => x.{{../AggregateRootPropertyName}}).HasForeignKey(x => x.{{Name}});
                {{/if}}
                {{/each}}
            });
            {{/each}}
