using {{Project.Name}}.EntityFrameworkCore;
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Volo.Abp.Domain.Repositories.EntityFrameworkCore;
using Volo.Abp.EntityFrameworkCore;

namespace {{Project.Name}}.{{AggregateRoot.NamePlural}};

public class EfCore{{AggregateRoot.Name}}Repository : EfCoreRepository<{{Project.ProductName}}DbContext, {{AggregateRoot.Name}}, Guid>, I{{AggregateRoot.Name}}Repository
{
    public EfCore{{AggregateRoot.Name}}Repository(IDbContextProvider<{{Project.ProductName}}DbContext> dbContextProvider)
        : base(dbContextProvider)
    {
    }

    {{#if AggregateRoot.Entities}}
    public override async Task DeleteAsync({{AggregateRoot.Name}} entity, bool autoSave = false, CancellationToken cancellationToken = default)
    {
        {{Project.ProductName}}DbContext dbContext = await GetDbContextAsync();

        {{#each AggregateRoot.Entities}}
        dbContext.{{NamePlural}}.RemoveRange(dbContext.{{NamePlural}}.Where(x => x.{{../AggregateRoot.Name}}Id == entity.Id));
        {{/each}}

        await base.DeleteAsync(entity, autoSave, cancellationToken);
    }
    {{/if}}
}